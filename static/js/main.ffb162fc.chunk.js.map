{"version":3,"sources":["components/renderScene.js","components/map/index.jsx","index.js"],"names":["box","onRender","scene","undefined","deltaTimeInMillis","getEngine","getDeltaTime","rotation","y","Math","PI","RenderScene","texturePath","antialias","onSceneReady","camera","ArcRotateCamera","Vector3","setTarget","Zero","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","faceUV","Array","fill","Vector4","MeshBuilder","CreateBox","width","height","mapMaterial","StandardMaterial","diffuseTexture","Texture","material","position","CreateGround","id","style","mapboxgl","accessToken","MAPBOX_TOKEN","Test","useState","latitude","longitude","zoom","viewport","setViewport","showCube","setShowCube","imageUrl","setImageUrl","searchResultLayer","mapRef","useRef","geocoderContainerRef","useEffect","console","log","window","addEventListener","resize","handleViewportChange","useCallback","newViewport","innerWidth","innerHeight","handleGeocoderViewportChange","transitionDuration","display","background","alignItems","padding","justifyContent","Button","variant","color","fontSize","onClick","ref","containerRef","onViewportChange","mapboxApiAccessToken","layers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffb162fc.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  ArcRotateCamera,\n  Vector3,\n  HemisphericLight,\n  MeshBuilder,\n  StandardMaterial,\n  Texture,\n  Vector4,\n} from \"@babylonjs/core\";\nimport SceneComponent from \"babylonjs-hook\"; \nlet box;\n\nconst onSceneReady = (scene, texturePath) => {\n  var camera = new ArcRotateCamera(\n    \"camera1\",\n    0,\n    0,\n    0,\n    new Vector3(0, 0, -10),\n    scene\n  )\n  camera.setTarget(Vector3.Zero());\n\n  const canvas = scene.getEngine().getRenderingCanvas();\n  camera.attachControl(canvas, true);\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n  light.intensity = 0.7;\n  let faceUV = new Array(6);\n  faceUV.fill(new Vector4(0, 0, 1, 1));\n  faceUV[0] = new Vector4(0, 0, -1, -1);\n\n  box = MeshBuilder.CreateBox(\n    \"box\",\n    { width: 5, height: 5, faceUV: faceUV },\n    scene\n  );\n  var mapMaterial = new StandardMaterial(\"mapMaterial\", scene);\n  mapMaterial.diffuseTexture = new Texture(`${texturePath}`, scene);\n  box.material = mapMaterial;\n\n  box.position.y = 0;\n\n  MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n};\n\nconst onRender = (scene) => {\n  if (box !== undefined) {\n    var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n\n    const rpm = 10;\n    box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\n  }\n};\n\nconst RenderScene = ({ texturePath }) => (\n  <div>\n    <SceneComponent\n      antialias\n      onSceneReady={(scene) => {\n        onSceneReady(scene, texturePath);\n      }}\n      onRender={onRender}\n      id=\"my-canvas\"\n      style={{  height: '800px',width:' 100%', }}\n    />\n  </div>\n);\n\nexport default RenderScene;\n","import 'mapbox-gl/dist/mapbox-gl.css'\nimport 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css'\nimport React, { useState, useRef, useCallback, useEffect } from 'react'\n\nimport MapGL from 'react-map-gl'\nimport DeckGL, { GeoJsonLayer } from 'deck.gl'\nimport Geocoder from 'react-map-gl-geocoder'\nimport mapboxgl from 'mapbox-gl'\nimport RenderScene from '../renderScene'\n\nimport Button from '@material-ui/core/Button'\nmapboxgl.accessToken =\n  'pk.eyJ1Ijoic2h1YmhhbWt1bWF3YXQ3ODkiLCJhIjoiY2tvM3hoOG9kMWRtMjJ1azQwNmlqMmpkdiJ9.1rAuBqANI9uOd4bzVbdxyg'\nconst MAPBOX_TOKEN =\n  'pk.eyJ1Ijoic2h1YmhhbWt1bWF3YXQ3ODkiLCJhIjoiY2tvM3hoOG9kMWRtMjJ1azQwNmlqMmpkdiJ9.1rAuBqANI9uOd4bzVbdxyg'\n\nconst Test = () => {\n  const [viewport, setViewport] = useState({\n    width: 400,\n    height: 400,\n    latitude: 37.7577,\n    longitude: -122.4376,\n    zoom: 8,\n  })\n  const [showCube, setShowCube] = useState(false)\n  const [imageUrl, setImageUrl] = useState(null)\n  const [searchResultLayer, setSearchResultLayer] = useState(null)\n  const mapRef = useRef()\n  const geocoderContainerRef = useRef()\n  useEffect(() => {\n    setImageUrl({\n      imageUrl: `https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/${viewport.longitude},${viewport.latitude},${viewport.zoom},0/${viewport.width}x${viewport.height}?access_token=${mapboxgl.accessToken}`,\n    })\n    console.log(imageUrl)\n  }, [showCube])\n  useEffect(() => {\n    window.addEventListener('resize', resize)\n    resize()\n  }, [])\n  const handleViewportChange = useCallback(\n    (newViewport) => setViewport(newViewport),\n    [],\n  )\n  const resize = () => {\n    handleViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    })\n  }\n  const handleOnResult = (event) => {\n    setSearchResultLayer(\n      new GeoJsonLayer({\n        id: 'search-result',\n        data: event.result.geometry,\n        getFillColor: [255, 0, 0, 128],\n        getRadius: 1000,\n        pointRadiusMinPixels: 10,\n        pointRadiusMaxPixels: 10,\n      }),\n    )\n  }\n\n  const handleGeocoderViewportChange = useCallback(\n    (newViewport) => {\n      const geocoderDefaultOverrides = { transitionDuration: 1000 }\n\n      return handleViewportChange({\n        ...newViewport,\n        ...geocoderDefaultOverrides,\n      })\n    },\n    [handleViewportChange],\n  )\n\n  return (\n    <>\n      <div style={{ display: 'flex' }}>\n        <div\n          style={{\n            height: '95vh',\n            width: '50vw',\n          }}>\n          <div\n            style={{\n              height: 40,\n              background: 'black',\n              display: 'flex',\n              alignItems: 'center',\n              padding: 5,\n              justifyContent: 'space-between',\n            }}>\n            <Button\n              variant='contained'\n              color='white'\n              style={{ fontSize: 'bold' }}\n              onClick={() => {\n                setShowCube({ showCube: !showCube })\n\n                console.log(imageUrl)\n              }}>\n              {showCube ? 'Hide' : 'Show'} 3D\n            </Button>\n          </div>\n          <MapGL\n            ref={mapRef}\n            containerRef={geocoderContainerRef}\n            {...viewport}\n            width='100%'\n            height='100%'\n            onViewportChange={handleViewportChange}\n            mapboxApiAccessToken={MAPBOX_TOKEN}>\n            <Geocoder\n              mapRef={mapRef}\n              onViewportChange={handleGeocoderViewportChange}\n              mapboxApiAccessToken={MAPBOX_TOKEN}\n              position='top-left'\n            />\n            <DeckGL {...viewport} layers={[searchResultLayer]} />\n          </MapGL>\n        </div>\n        <div\n          style={{\n            height: '90vh',\n            width: '50vw',\n          }}>\n          {showCube && <RenderScene texturePath={imageUrl} />}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Test\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Test from \"./components/map/index\";\n// import Test from './components/test/test' ;\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Map /> */}\n    \n    <Test/>\n     {/* <MapView/> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}